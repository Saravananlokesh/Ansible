---
- name: Apply Oracle Patch on Standby Database
  hosts: "{{ hostlist }}"
  become: yes

  vars:
    oracle_home: /opt/oracle/product/19.3.0/db_1
    local_patch_dir: /tmp
    patch_dir: /oraback/patch
    patch_db_zip: p37642901_190000_Linux-x86-64.zip
    patch_opatch_zip: p6880880_190000_Linux-x86-64.zip

  tasks:

    - name: Export Oracle environment variables
      shell: |
        export ORACLE_HOME={{ oracle_home }}
        export PATH=$PATH:$ORACLE_HOME/OPatch:$ORACLE_HOME/bin
        echo "ORACLE_HOME: $ORACLE_HOME"
        echo "PATH: $PATH"
      become_user: oracle

    - name: Create patch directory
      file:
        path: "{{ patch_dir }}"
        state: directory
        owner: oracle
        group: oinstall
        mode: '0775'

    - name: Copy DB patch zip to patch directory
      copy:
        src: "{{ local_patch_dir }}/{{ patch_db_zip }}"
        dest: "{{ patch_dir }}/{{ patch_db_zip }}"
        owner: oracle
        group: oinstall

    - name: Copy OPatch zip to patch directory
      copy:
        src: "{{ local_patch_dir }}/{{ patch_opatch_zip }}"
        dest: "{{ patch_dir }}/{{ patch_opatch_zip }}"
        owner: oracle
        group: oinstall

    - name: Check database status
      shell: |
        . ~/.bash_profile
        sqlplus / as sysdba <<EOF
        set echo on
        set lines 200
        col name format a20
        col open_mode format a20
        col database_role format a20
        select name, open_mode, database_role from gv\$database;
        select sequence#, thread#, to_char(FIRST_TIME,'dd-mm-yyyy hh24:mi:ss') "SYNC TIME"
          from v\$log_history
         where sequence# in (select max(sequence#) from v\$log_history group by thread#);
        exit
        EOF
      become_user: oracle
      register: db_status_output

    - name: Debug database status output
      debug:
        var: db_status_output.stdout

    - name: Cancel managed recovery and shut down database
      shell: |
        . ~/.bash_profile
        sqlplus / as sysdba <<EOF
        alter database recover managed standby database cancel;
        shutdown immediate;
        exit
        EOF
      become_user: oracle

    - name: Stop listener
      shell: |
        . ~/.bash_profile
        lsnrctl stop
      become_user: oracle

    - name: Backup existing OPatch directory
      shell: |
        . ~/.bash_profile
        cd $ORACLE_HOME
        mv OPatch OPatch_new
      become_user: oracle

    - name: Verify OPatch zip file exists in /oraback/patch
      shell: |
        if [ ! -f "{{ patch_dir }}/{{ patch_opatch_zip }}" ]; then
          echo "ERROR: OPatch zip file {{ patch_dir }}/{{ patch_opatch_zip }} does not exist."
          exit 1
        fi
      become_user: oracle

    - name: Copy OPatch zip to Oracle Home
      shell: |
        . ~/.bash_profile
        cp {{ patch_dir }}/{{ patch_opatch_zip }} $ORACLE_HOME/
      become_user: oracle

    - name: Unzip OPatch tool
      shell: |
        . ~/.bash_profile
        cd $ORACLE_HOME
        unzip -o p6880880_190000_Linux-x86-64.zip
      become_user: oracle

    - name: Verify OPatch version
      shell: |
        . ~/.bash_profile
        $ORACLE_HOME/OPatch/opatch version
      become_user: oracle

    - name: Verify DB patch zip file permissions
      shell: |
        if [ ! -f "{{ patch_dir }}/{{ patch_db_zip }}" ]; then
          echo "ERROR: Patch file {{ patch_dir }}/{{ patch_db_zip }} does not exist."
          exit 1
        fi
        if [ ! -r "{{ patch_dir }}/{{ patch_db_zip }}" ]; then
          echo "ERROR: Patch file {{ patch_dir }}/{{ patch_db_zip }} is not readable by the current user."
          exit 1
        fi
      become_user: oracle

    - name: Unzip DB patch zip in /oraback/patch
      shell: |
        . ~/.bash_profile
        cd {{ patch_dir }}
        unzip -o {{ patch_db_zip }}
      become_user: oracle

    - name: Verify unzipped patch directory exists
      shell: |
        if [ ! -d "{{ patch_dir }}" ]; then
          echo "ERROR: Directory {{ patch_dir }} does not exist."
          exit 1
        fi
        if [ ! -r "{{ patch_dir }}" ] || [ ! -x "{{ patch_dir }}" ]; then
          echo "ERROR: Directory {{ patch_dir }} is not accessible by the current user."
          exit 1
        fi
      become_user: oracle

    - name: Determine unzipped patch directory
      shell: |
        . ~/.bash_profile
        cd {{ patch_dir }}
        unzip_dir=$(unzip -l {{ patch_db_zip }} | awk 'NR==4 {print $4}' | cut -d'/' -f1)
        if [ ! -d "$unzip_dir" ]; then
          echo "ERROR: Unzipped directory $unzip_dir does not exist."
          exit 1
        fi
        echo $unzip_dir
      become_user: oracle
      register: unzip_dir_output

    - name: Debug unzipped directory
      debug:
        var: unzip_dir_output.stdout

    - name: Check inventory before patching
      shell: |
        . ~/.bash_profile
        cd {{ patch_dir }}
        $ORACLE_HOME/OPatch/opatch lsinventory
      become_user: oracle

    - name: Check patch conflicts in /oraback/patch/37642901
      shell: |
        . ~/.bash_profile
        cd {{ patch_dir }}/37642901
        opatch prereq CheckConflictAgainstOHWithDetail -ph ./ 
      become_user: oracle

    - name: Apply the patch from /oraback/patch/37642901
      shell: |
        . ~/.bash_profile
        cd {{ patch_dir }}/37642901
        $ORACLE_HOME/OPatch/opatch apply -silent
      become_user: oracle

    - name: Start database in mount, re-enable recovery, and start listener
      shell: |
        . ~/.bash_profile
        sqlplus / as sysdba <<EOF
        startup mount;
        alter database recover managed standby database disconnect from session;
        select sequence#, thread#, to_char(FIRST_TIME,'dd-mm-yyyy hh24:mi:ss') "SYNC TIME"
          from v$log_history
         where sequence# in (select max(sequence#) from v$log_history group by thread#);
        exit
        EOF
        lsnrctl start
      become_user: oracle
